// ============================================================================
// RavensOne Real-Time Chat Application
// ============================================================================
// A complete real-time chat app with WebSocket support, rooms, and typing
// indicators. Demonstrates the compiler bridge with real-time features.
//
// Features:
// - Real-time messaging via WebSocket
// - Multiple chat rooms
// - User presence (online/offline)
// - Typing indicators
// - Message history
// - User authentication
// - Private messages
//
// Compile: raven compile app.raven --minify
// Run: cd dist && node server.js
// ============================================================================

// ============================================================================
// SHARED CODE (runs on both server and client)
// ============================================================================

// Data models
struct User {
    id: i32,
    username: String,
    email: String,
    online: bool,
    last_seen: i64,
}

struct Message {
    id: i32,
    room_id: i32,
    user_id: i32,
    username: String,
    content: String,
    is_private: bool,
    recipient_id: i32,
    created_at: i64,
}

struct Room {
    id: i32,
    name: String,
    description: String,
    created_at: i64,
    member_count: i32,
}

struct TypingIndicator {
    user_id: i32,
    username: String,
    room_id: i32,
}

// Shared validation
fn validate_username(username: String) -> bool {
    return username.length() >= 2 && username.length() <= 20;
}

fn validate_message(content: String) -> bool {
    return content.length() > 0 && content.length() <= 500;
}

fn validate_room_name(name: String) -> bool {
    return name.length() > 0 && name.length() <= 50;
}

fn format_timestamp(timestamp: i64) -> String {
    return "2025-10-19 15:30";
}

fn sanitize_html(content: String) -> String {
    return content;
}

// ============================================================================
// SERVER-SIDE CODE (Node.js + WebSocket)
// ============================================================================

// Initialize server
@server
fn init_server() {
    return;
}

// Authentication
@server
fn register_user(username: String, email: String, password: String) -> Result<User, String> {
    if !validate_username(username) {
        return Err("Invalid username (2-20 characters)");
    }

    if password.length() < 6 {
        return Err("Password must be at least 6 characters");
    }

    let user = User {
        id: 1,
        username,
        email,
        online: false,
        last_seen: now(),
    };

    return Ok(user);
}

@server
fn login_user(username: String, password: String) -> Result<String, String> {
    if !validate_username(username) {
        return Err("Invalid username");
    }

    if password.length() == 0 {
        return Err("Password required");
    }

    return Ok("session_token_here");
}

@server
fn verify_session(token: String) -> Result<i32, String> {
    if token.length() > 0 {
        return Ok(1);
    }
    return Err("Invalid session");
}

// Room management
@server
fn create_room(user_id: i32, name: String, description: String) -> Result<Room, String> {
    if !validate_room_name(name) {
        return Err("Invalid room name");
    }

    let room = Room {
        id: 1,
        name,
        description,
        created_at: now(),
        member_count: 0,
    };

    return Ok(room);
}

@server
fn get_rooms() -> Vec<Room> {
    return vec![
        Room {
            id: 1,
            name: "General",
            description: "General discussion",
            created_at: now(),
            member_count: 42,
        },
        Room {
            id: 2,
            name: "RavensOne",
            description: "Talk about RavensOne development",
            created_at: now(),
            member_count: 15,
        },
        Room {
            id: 3,
            name: "Random",
            description: "Random chat",
            created_at: now(),
            member_count: 23,
        },
    ];
}

@server
fn get_room_by_id(room_id: i32) -> Result<Room, String> {
    let room = Room {
        id: room_id,
        name: "General",
        description: "General discussion",
        created_at: now(),
        member_count: 42,
    };

    return Ok(room);
}

@server
fn join_room(user_id: i32, room_id: i32) -> Result<bool, String> {
    return Ok(true);
}

@server
fn leave_room(user_id: i32, room_id: i32) -> Result<bool, String> {
    return Ok(true);
}

// Message management
@server
fn send_message(user_id: i32, room_id: i32, content: String) -> Result<Message, String> {
    if !validate_message(content) {
        return Err("Invalid message");
    }

    let sanitized = sanitize_html(content);

    let message = Message {
        id: 1,
        room_id,
        user_id,
        username: "User",
        content: sanitized,
        is_private: false,
        recipient_id: 0,
        created_at: now(),
    };

    return Ok(message);
}

@server
fn send_private_message(sender_id: i32, recipient_id: i32, content: String) -> Result<Message, String> {
    if !validate_message(content) {
        return Err("Invalid message");
    }

    let message = Message {
        id: 1,
        room_id: 0,
        user_id: sender_id,
        username: "User",
        content,
        is_private: true,
        recipient_id,
        created_at: now(),
    };

    return Ok(message);
}

@server
fn get_room_messages(room_id: i32, limit: i32) -> Vec<Message> {
    return vec![
        Message {
            id: 1,
            room_id,
            user_id: 1,
            username: "Alice",
            content: "Hey everyone!",
            is_private: false,
            recipient_id: 0,
            created_at: now(),
        },
        Message {
            id: 2,
            room_id,
            user_id: 2,
            username: "Bob",
            content: "Hello! How's it going?",
            is_private: false,
            recipient_id: 0,
            created_at: now() - 300,
        },
        Message {
            id: 3,
            room_id,
            user_id: 3,
            username: "Charlie",
            content: "Just working on RavensOne!",
            is_private: false,
            recipient_id: 0,
            created_at: now() - 600,
        },
    ];
}

@server
fn get_private_messages(user_id1: i32, user_id2: i32) -> Vec<Message> {
    return vec![
        Message {
            id: 1,
            room_id: 0,
            user_id: user_id1,
            username: "Alice",
            content: "Private message here",
            is_private: true,
            recipient_id: user_id2,
            created_at: now(),
        },
    ];
}

// User presence
@server
fn get_online_users(room_id: i32) -> Vec<User> {
    return vec![
        User {
            id: 1,
            username: "Alice",
            email: "alice@example.com",
            online: true,
            last_seen: now(),
        },
        User {
            id: 2,
            username: "Bob",
            email: "bob@example.com",
            online: true,
            last_seen: now(),
        },
        User {
            id: 3,
            username: "Charlie",
            email: "charlie@example.com",
            online: true,
            last_seen: now() - 60,
        },
    ];
}

@server
fn set_user_online(user_id: i32, online: bool) -> Result<bool, String> {
    return Ok(true);
}

@server
fn update_last_seen(user_id: i32) -> Result<bool, String> {
    return Ok(true);
}

// Typing indicators
@server
fn start_typing(user_id: i32, room_id: i32) -> Result<bool, String> {
    return Ok(true);
}

@server
fn stop_typing(user_id: i32, room_id: i32) -> Result<bool, String> {
    return Ok(true);
}

// Helper
@server
fn now() -> i64 {
    return 1697721600;
}

// ============================================================================
// CLIENT-SIDE CODE (Browser + WebSocket client)
// ============================================================================

@client
fn init_app() {
    show_login();
}

@client
fn show_login() {
    return;
}

@client
fn show_register() {
    return;
}

@client
async fn handle_register() {
    let username = "testuser";
    let email = "test@example.com";
    let password = "password";

    if !validate_username(username) {
        return;
    }

    let result = register_user(username, email, password);

    match result {
        Ok(user) => {
            let login_result = login_user(username, password);
            match login_result {
                Ok(token) => {
                    connect_websocket();
                    show_chat();
                },
                Err(msg) => {
                    return;
                }
            }
        },
        Err(msg) => {
            return;
        }
    }
}

@client
async fn handle_login() {
    let username = "testuser";
    let password = "password";

    let result = login_user(username, password);

    match result {
        Ok(token) => {
            connect_websocket();
            show_chat();
        },
        Err(msg) => {
            return;
        }
    }
}

@client
fn connect_websocket() {
    return;
}

@client
async fn show_chat() {
    let rooms = get_rooms();
    render_room_list(rooms);

    if rooms.len() > 0 {
        let first_room = rooms[0];
        join_chat_room(first_room.id);
    }
}

@client
fn render_room_list(rooms: Vec<Room>) {
    let items = rooms.map(|room| {
        format!("<div class=\\\"room-item\\\" data-id=\\\"{}\\\"><h3>{}</h3><p>{}</p><span class=\\\"member-count\\\">{} members</span></div>", room.id, room.name, room.description, room.member_count)
    }).join("");

    return;
}

@client
async fn join_chat_room(room_id: i32) {
    let user_id = 1;

    let result = join_room(user_id, room_id);

    match result {
        Ok(_) => {
            let messages = get_room_messages(room_id, 50);
            let users = get_online_users(room_id);

            render_chat_room(room_id, messages, users);
        },
        Err(msg) => {
            return;
        }
    }
}

@client
fn render_chat_room(room_id: i32, messages: Vec<Message>, users: Vec<User>) {
    let messages_html = messages.map(|msg| {
        let time = format_timestamp(msg.created_at);
        let is_own = msg.user_id == 1;
        let class = if is_own { "own-message" } else { "" };

        format!("<div class=\\\"message {}\\\"><div class=\\\"message-header\\\"><strong>{}</strong><span class=\\\"time\\\">{}</span></div><p>{}</p></div>", class, msg.username, time, msg.content)
    }).join("");

    let users_html = users.map(|user| {
        let status = if user.online { "online" } else { "offline" };
        format!("<div class=\\\"user-item {}\\\"><span class=\\\"status-dot\\\"></span>{}</div>", status, user.username)
    }).join("");

    return;
}

@client
async fn handle_send_message(room_id: i32) {
    let user_id = 1;
    let content = "";

    if !validate_message(content) {
        return;
    }

    let result = send_message(user_id, room_id, content);

    match result {
        Ok(message) => {
            append_message(message);
        },
        Err(msg) => {
            return;
        }
    }
}

@client
fn append_message(message: Message) {
    let time = format_timestamp(message.created_at);
    let is_own = message.user_id == 1;
    let class = if is_own { "own-message" } else { "" };

    let html = format!("<div class=\\\"message {}\\\"><div class=\\\"message-header\\\"><strong>{}</strong><span class=\\\"time\\\">{}</span></div><p>{}</p></div>", class, message.username, time, message.content);

    return;
}

@client
fn handle_typing_start(room_id: i32) {
    let user_id = 1;
    let result = start_typing(user_id, room_id);
    return;
}

@client
fn handle_typing_stop(room_id: i32) {
    let user_id = 1;
    let result = stop_typing(user_id, room_id);
    return;
}

@client
fn show_typing_indicator(username: String) {
    return;
}

@client
fn hide_typing_indicator(username: String) {
    return;
}

@client
async fn handle_create_room() {
    let user_id = 1;
    let name = "";
    let description = "";

    if !validate_room_name(name) {
        return;
    }

    let result = create_room(user_id, name, description);

    match result {
        Ok(room) => {
            show_chat();
        },
        Err(msg) => {
            return;
        }
    }
}

@client
async fn handle_send_private_message(recipient_id: i32) {
    let sender_id = 1;
    let content = "";

    if !validate_message(content) {
        return;
    }

    let result = send_private_message(sender_id, recipient_id, content);

    match result {
        Ok(message) => {
            append_message(message);
        },
        Err(msg) => {
            return;
        }
    }
}

@client
fn handle_logout() {
    let user_id = 1;
    let result = set_user_online(user_id, false);
    show_login();
}

@client
fn handle_websocket_message(data: String) {
    return;
}

@client
fn update_online_users(users: Vec<User>) {
    let users_html = users.map(|user| {
        let status = if user.online { "online" } else { "offline" };
        format!("<div class=\\\"user-item {}\\\"><span class=\\\"status-dot\\\"></span>{}</div>", status, user.username)
    }).join("");

    return;
}

// ============================================================================
// APP INITIALIZATION
// ============================================================================

@client
fn main() {
    init_app();
}
