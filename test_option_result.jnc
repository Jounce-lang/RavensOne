// Test Option<T> and Result<T, E> with if/else expressions
// These patterns should now work after fixing the borrow checker bug

// Test Option<T>
fn find_user(id: i32) -> Option<String> {
    if id == 1 {
        Some("Alice")
    } else {
        if id == 2 {
            Some("Bob")
        } else {
            None
        }
    }
}

// Test Result<T, E>
fn divide(a: f64, b: f64) -> Result<f64, String> {
    if b == 0.0 {
        Err("Division by zero")
    } else {
        Ok(a / b)
    }
}

// Test with match expressions
fn process_user(id: i32) -> String {
    let user = find_user(id);
    match user {
        Some(name) => name,
        None => "Unknown",
    }
}

fn main() {
    // Test Option
    let user1 = find_user(1);
    let user2 = find_user(99);

    println!("User 1: {}", process_user(1));
    println!("User 2: {}", process_user(99));

    // Test Result
    let result1 = divide(10.0, 2.0);
    let result2 = divide(10.0, 0.0);

    match result1 {
        Ok(value) => println!("Result: {}", value),
        Err(error) => println!("Error: {}", error),
    }

    match result2 {
        Ok(value) => println!("Result: {}", value),
        Err(error) => println!("Error: {}", error),
    }
}
