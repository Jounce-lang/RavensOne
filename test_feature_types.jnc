// Test: Type system features
struct Point {
    x: i32,
    y: i32,
}

enum Option<T> {
    Some(T),
    None,
}

enum Result<T, E> {
    Ok(T),
    Err(E),
}

fn main() {
    // Struct construction
    let p = Point { x: 10, y: 20 };

    // Struct field access
    let x_val = p.x;

    // Struct field assignment
    let mut point = Point { x: 0, y: 0 };
    point.x = 5;

    // Enum construction
    let some_value = Some(42);
    let none_value = None;

    let ok = Ok(100);
    let err = Err("error message");

    // Type casting
    let float_val = 42 as f64;
    let int_val = 3.14 as i32;

    // Type annotations
    let typed: i32 = 42;
    let inferred = 42;

    // Const declarations
    const MAX_SIZE: i32 = 100;
    const MIN_SIZE = 10;

    return 0;
}
