// Comprehensive recursion test
// Tests multiple recursion patterns

// 1. Simple recursion (factorial)
fn factorial(n: i32) -> i32 {
    if n <= 1 {
        1
    } else {
        n * factorial(n - 1)
    }
}

// 2. Multiple recursive calls (fibonacci)
fn fibonacci(n: i32) -> i32 {
    if n <= 1 {
        n
    } else {
        fibonacci(n - 1) + fibonacci(n - 2)
    }
}

// 3. Recursion with accumulator (tail-call-like pattern)
fn sum_to_n_helper(n: i32, acc: i32) -> i32 {
    if n == 0 {
        acc
    } else {
        sum_to_n_helper(n - 1, acc + n)
    }
}

fn sum_to_n(n: i32) -> i32 {
    sum_to_n_helper(n, 0)
}

// 4. Mutual recursion
fn is_even(n: i32) -> bool {
    if n == 0 {
        true
    } else {
        is_odd(n - 1)
    }
}

fn is_odd(n: i32) -> bool {
    if n == 0 {
        false
    } else {
        is_even(n - 1)
    }
}

fn main() {
    println!("Factorial(5) = {}", factorial(5));
    println!("Fibonacci(7) = {}", fibonacci(7));
    println!("Sum 1 to 10 = {}", sum_to_n(10));
    println!("Is 4 even? {}", is_even(4));
    println!("Is 7 odd? {}", is_odd(7));
}
