/// Async data fetching with loading states
use raven_store::{create_store, logger};

struct User {
    id: i32,
    name: String,
    email: String
}

struct DataState {
    users: Vec<User>,
    loading: bool,
    error: Option<String>
}

let store = create_store_with_middleware(
    DataState {
        users: Vec::new(),
        loading: false,
        error: None
    },
    vec![logger()]
);

// Async action
let fetch_users = async () => {
    // Set loading state
    store.update((state) => {
        state.loading = true;
        state.error = None;
    });

    // Fetch data
    let result = await fetch("/api/users");

    if result.ok {
        let users = await result.json();

        store.update((state) => {
            state.users = users;
            state.loading = false;
        });
    } else {
        store.update((state) => {
            state.error = Some("Failed to fetch users".to_string());
            state.loading = false;
        });
    }
};

// Component
component UserList() {
    let state = store.get();

    // Fetch on mount
    onMount(() => {
        fetch_users();
    });

    <div>
        <h2>Users</h2>

        {if state.loading {
            <div class="loading">Loading...</div>
        } else if let Some(error) = state.error {
            <div class="error">{error}</div>
        } else {
            <ul>
                {state.users.map(|user| {
                    <li key={user.id}>
                        <strong>{user.name}</strong> - {user.email}
                    </li>
                })}
            </ul>
        }}

        <button onClick={fetch_users} disabled={state.loading}>
            Refresh
        </button>
    </div>
}
